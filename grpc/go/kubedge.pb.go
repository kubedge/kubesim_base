/*
Copyright 2018 Kubedge

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kubedge.proto

package kubedge

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the protocol name.
type EnodeRequest struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnodeRequest) Reset()         { *m = EnodeRequest{} }
func (m *EnodeRequest) String() string { return proto.CompactTextString(m) }
func (*EnodeRequest) ProtoMessage()    {}
func (*EnodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7659456244382b8, []int{0}
}

func (m *EnodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnodeRequest.Unmarshal(m, b)
}
func (m *EnodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnodeRequest.Marshal(b, m, deterministic)
}
func (m *EnodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnodeRequest.Merge(m, src)
}
func (m *EnodeRequest) XXX_Size() int {
	return xxx_messageInfo_EnodeRequest.Size(m)
}
func (m *EnodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnodeRequest proto.InternalMessageInfo

func (m *EnodeRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// The response message containing the protocol or network
type EPCReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EPCReply) Reset()         { *m = EPCReply{} }
func (m *EPCReply) String() string { return proto.CompactTextString(m) }
func (*EPCReply) ProtoMessage()    {}
func (*EPCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7659456244382b8, []int{1}
}

func (m *EPCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EPCReply.Unmarshal(m, b)
}
func (m *EPCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EPCReply.Marshal(b, m, deterministic)
}
func (m *EPCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EPCReply.Merge(m, src)
}
func (m *EPCReply) XXX_Size() int {
	return xxx_messageInfo_EPCReply.Size(m)
}
func (m *EPCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EPCReply.DiscardUnknown(m)
}

var xxx_messageInfo_EPCReply proto.InternalMessageInfo

func (m *EPCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// This is for request from UE ( bluetooth/wifi )
type UERequest struct {
	Network              string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UERequest) Reset()         { *m = UERequest{} }
func (m *UERequest) String() string { return proto.CompactTextString(m) }
func (*UERequest) ProtoMessage()    {}
func (*UERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7659456244382b8, []int{2}
}

func (m *UERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UERequest.Unmarshal(m, b)
}
func (m *UERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UERequest.Marshal(b, m, deterministic)
}
func (m *UERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UERequest.Merge(m, src)
}
func (m *UERequest) XXX_Size() int {
	return xxx_messageInfo_UERequest.Size(m)
}
func (m *UERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UERequest.DiscardUnknown(m)
}

var xxx_messageInfo_UERequest proto.InternalMessageInfo

func (m *UERequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func init() {
	proto.RegisterType((*EnodeRequest)(nil), "kubedge.EnodeRequest")
	proto.RegisterType((*EPCReply)(nil), "kubedge.EPCReply")
	proto.RegisterType((*UERequest)(nil), "kubedge.UERequest")
}

func init() { proto.RegisterFile("kubedge.proto", fileDescriptor_e7659456244382b8) }

var fileDescriptor_e7659456244382b8 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2e, 0x4d, 0x4a,
	0x4d, 0x49, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xb4, 0xb8,
	0x78, 0x5c, 0xf3, 0xf2, 0x53, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8,
	0x38, 0xc0, 0x2a, 0x92, 0xf3, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25,
	0x15, 0x2e, 0x0e, 0xd7, 0x00, 0xe7, 0xa0, 0xd4, 0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc,
	0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xa8, 0x32, 0x18, 0x57, 0x49, 0x95, 0x8b, 0x33, 0xd4, 0x15,
	0x66, 0x9c, 0x04, 0x17, 0x7b, 0x5e, 0x6a, 0x49, 0x79, 0x7e, 0x51, 0x36, 0x4c, 0x19, 0x94, 0x6b,
	0x54, 0xce, 0xc5, 0xee, 0x0d, 0x71, 0x83, 0x90, 0x39, 0x17, 0xa7, 0x5b, 0x66, 0x59, 0xaa, 0xbb,
	0x4b, 0x6a, 0x6e, 0xbe, 0x90, 0xa8, 0x1e, 0xcc, 0xa5, 0xc8, 0xee, 0x92, 0x12, 0x44, 0x08, 0x43,
	0x9d, 0xa0, 0xc4, 0x20, 0x64, 0xcc, 0xc5, 0xe1, 0x92, 0x5a, 0x92, 0x9a, 0x5c, 0xe2, 0x17, 0x2e,
	0x24, 0x04, 0x57, 0x00, 0xb7, 0x1d, 0xab, 0xa6, 0x24, 0x36, 0xb0, 0x7f, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0xdc, 0xec, 0x6b, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KubedgeClient is the client API for Kubedge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KubedgeClient interface {
	// Sends a message
	FiveGDemo(ctx context.Context, in *EnodeRequest, opts ...grpc.CallOption) (*EPCReply, error)
	DetectNW(ctx context.Context, in *UERequest, opts ...grpc.CallOption) (*EPCReply, error)
}

type kubedgeClient struct {
	cc *grpc.ClientConn
}

func NewKubedgeClient(cc *grpc.ClientConn) KubedgeClient {
	return &kubedgeClient{cc}
}

func (c *kubedgeClient) FiveGDemo(ctx context.Context, in *EnodeRequest, opts ...grpc.CallOption) (*EPCReply, error) {
	out := new(EPCReply)
	err := c.cc.Invoke(ctx, "/kubedge.Kubedge/FiveGDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubedgeClient) DetectNW(ctx context.Context, in *UERequest, opts ...grpc.CallOption) (*EPCReply, error) {
	out := new(EPCReply)
	err := c.cc.Invoke(ctx, "/kubedge.Kubedge/DetectNW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubedgeServer is the server API for Kubedge service.
type KubedgeServer interface {
	// Sends a message
	FiveGDemo(context.Context, *EnodeRequest) (*EPCReply, error)
	DetectNW(context.Context, *UERequest) (*EPCReply, error)
}

func RegisterKubedgeServer(s *grpc.Server, srv KubedgeServer) {
	s.RegisterService(&_Kubedge_serviceDesc, srv)
}

func _Kubedge_FiveGDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubedgeServer).FiveGDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubedge.Kubedge/FiveGDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubedgeServer).FiveGDemo(ctx, req.(*EnodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubedge_DetectNW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubedgeServer).DetectNW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubedge.Kubedge/DetectNW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubedgeServer).DetectNW(ctx, req.(*UERequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kubedge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubedge.Kubedge",
	HandlerType: (*KubedgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FiveGDemo",
			Handler:    _Kubedge_FiveGDemo_Handler,
		},
		{
			MethodName: "DetectNW",
			Handler:    _Kubedge_DetectNW_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubedge.proto",
}
