# Copyright 2018 Kubedge.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kubedge.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='kubedge.proto',
  package='kubedge',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\rkubedge.proto\x12\x07kubedge\" \n\x0c\x45nodeRequest\x12\x10\n\x08protocol\x18\x01 \x01(\t\"\x1b\n\x08\x45PCReply\x12\x0f\n\x07message\x18\x01 \x01(\t\"\x1c\n\tUERequest\x12\x0f\n\x07network\x18\x01 \x01(\t2w\n\x07Kubedge\x12\x37\n\tFiveGDemo\x12\x15.kubedge.EnodeRequest\x1a\x11.kubedge.EPCReply\"\x00\x12\x33\n\x08\x44\x65tectNW\x12\x12.kubedge.UERequest\x1a\x11.kubedge.EPCReply\"\x00\x62\x06proto3')
)




_ENODEREQUEST = _descriptor.Descriptor(
  name='EnodeRequest',
  full_name='kubedge.EnodeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='protocol', full_name='kubedge.EnodeRequest.protocol', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=58,
)


_EPCREPLY = _descriptor.Descriptor(
  name='EPCReply',
  full_name='kubedge.EPCReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='kubedge.EPCReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=60,
  serialized_end=87,
)


_UEREQUEST = _descriptor.Descriptor(
  name='UERequest',
  full_name='kubedge.UERequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network', full_name='kubedge.UERequest.network', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=89,
  serialized_end=117,
)

DESCRIPTOR.message_types_by_name['EnodeRequest'] = _ENODEREQUEST
DESCRIPTOR.message_types_by_name['EPCReply'] = _EPCREPLY
DESCRIPTOR.message_types_by_name['UERequest'] = _UEREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

EnodeRequest = _reflection.GeneratedProtocolMessageType('EnodeRequest', (_message.Message,), dict(
  DESCRIPTOR = _ENODEREQUEST,
  __module__ = 'kubedge_pb2'
  # @@protoc_insertion_point(class_scope:kubedge.EnodeRequest)
  ))
_sym_db.RegisterMessage(EnodeRequest)

EPCReply = _reflection.GeneratedProtocolMessageType('EPCReply', (_message.Message,), dict(
  DESCRIPTOR = _EPCREPLY,
  __module__ = 'kubedge_pb2'
  # @@protoc_insertion_point(class_scope:kubedge.EPCReply)
  ))
_sym_db.RegisterMessage(EPCReply)

UERequest = _reflection.GeneratedProtocolMessageType('UERequest', (_message.Message,), dict(
  DESCRIPTOR = _UEREQUEST,
  __module__ = 'kubedge_pb2'
  # @@protoc_insertion_point(class_scope:kubedge.UERequest)
  ))
_sym_db.RegisterMessage(UERequest)



_KUBEDGE = _descriptor.ServiceDescriptor(
  name='Kubedge',
  full_name='kubedge.Kubedge',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=119,
  serialized_end=238,
  methods=[
  _descriptor.MethodDescriptor(
    name='FiveGDemo',
    full_name='kubedge.Kubedge.FiveGDemo',
    index=0,
    containing_service=None,
    input_type=_ENODEREQUEST,
    output_type=_EPCREPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DetectNW',
    full_name='kubedge.Kubedge.DetectNW',
    index=1,
    containing_service=None,
    input_type=_UEREQUEST,
    output_type=_EPCREPLY,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_KUBEDGE)

DESCRIPTOR.services_by_name['Kubedge'] = _KUBEDGE

# @@protoc_insertion_point(module_scope)
